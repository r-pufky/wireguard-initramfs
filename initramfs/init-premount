#!/bin/sh

PREREQ="udev"

prereqs() {
  echo "${PREREQ}"
}

case "${1}" in
  prereqs)
    prereqs
    exit 0
  ;;
esac

. /scripts/functions

translate_month() {
    case "${1}" in
    Jan) month_number=01 ;;
    Feb) month_number=02 ;;
    Mar) month_number=03 ;;
    Apr) month_number=04 ;;
    May) month_number=05 ;;
    Jun) month_number=06 ;;
    Jul) month_number=07 ;;
    Aug) month_number=08 ;;
    Sep) month_number=09 ;;
    Oct) month_number=10 ;;
    Nov) month_number=11 ;;
    Dec) month_number=12 ;;
    esac

    echo "${month_number}"
}

convert_web_date() {
  year=$(echo "${1}" | cut -d' ' -f 4)
  month=$(echo "${1}" | cut -d' ' -f 3)
  day=$(echo "${1}" | cut -d' ' -f 2)

  datetime=$(echo "${1}" | cut -d' ' -f 5)
  hour=$(echo "${datetime}" | cut -d':' -f 1)
  minutes=$(echo "${datetime}" | cut -d':' -f 2)
  seconds=$(echo "${datetime}" | cut -d':' -f 3)

  month_number=$(translate_month "${month}")

  echo "${year}${month_number}${day}${hour}${minutes}.${seconds}"
}

convert_web_date_compare() {
  year=$(echo "${1}" | cut -d' ' -f 4)
  month=$(echo "${1}" | cut -d' ' -f 3)
  day=$(echo "${1}" | cut -d' ' -f 2)

  datetime=$(echo "${1}" | cut -d' ' -f 5)
  hour=$(echo "${datetime}" | cut -d':' -f 1)
  minutes=$(echo "${datetime}" | cut -d':' -f 2)
  seconds=$(echo "${datetime}" | cut -d':' -f 3)

  month_number=$(translate_month "${month}")

  echo "${year}-${month_number}-${day} ${hour}:${minutes}:${seconds}"
}

generate_resolv_conf() {
  for adapter in /run/net-*.conf; do
    . "${adapter}"

    if [ -n "${IPV4DNS0}" ]; then
      echo "nameserver ${IPV4DNS0}"
    fi

    if [ -n "${IPV4DNS1}" ]; then
      echo "nameserver ${IPV4DNS1}"
    fi

    if [ -n "${IPV6DNS0}" ]; then
      echo "nameserver ${IPV6DNS0}"
    fi

    if [ -n "${IPV6DNS1}" ]; then
      echo "nameserver ${IPV6DNS1}"
    fi
  done
}

log_begin_msg 'Check required dependencies'
if [ ! -e /sbin/wg ]; then
  log_failure_msg '/sbin/wg: not found; skipping start'
  exit 0
fi

if [ ! -e /etc/wireguard/initramfs ]; then
  log_failure_msg '/etc/wireguard/initramfs: not found; skipping start'
  exit 0
fi
log_end_msg

log_begin_msg 'Enable networking'
# Ensure networking is started (idempotent) and setup DNS.
configure_networking

if [ ! -e /etc/resolv.conf ]; then
  generate_resolv_conf > /etc/resolv.conf
fi
log_end_msg

log_begin_msg 'Loading wireguard config'
. /etc/wireguard/initramfs
log_end_msg

log_begin_msg 'Check wg-quick dependencies'
if [ -n "${ENABLE_QUICK}" ] && [ ! -e /sbin/wg-quick ]; then
  log_failure_msg '/sbin/wg-quick: not found; skipping start'
  exit 0
fi

if [ -n "${ENABLE_QUICK}" ] && [ ! -e /usr/bin/bash ]; then
  log_failure_msg '/usr/bin/bash: not found; skipping start'
  exit 0
fi
log_end_msg

log_begin_msg 'Final sanity check to prevent boot wedging'
if [ ! -e "${ADAPTER}" ]; then
  log_failure_msg "${ADAPTER}: not found; skipping start"
  exit 0
fi

if [ -z "${INTERFACE}" ]; then
  log_failure_msg 'Interface name is not defined'
  return 1
fi

if [ -z "${INTERFACE_ADDR_IPV4}" ] && [ -z "${INTERFACE_ADDR_IPV6}" ]; then
  log_failure_msg 'Interface address is not defined'
  return 1
fi

if [ -z "${PEER_ALLOWED_IPS_IPV4}" ] && [ -z "${PEER_ALLOWED_IPS_IPV6}" ]; then
  log_failure_msg 'Allowed IPs is not defined'
  return 1
fi
log_end_msg

if [ -n "${DATETIME_URL}" ]; then
  log_begin_msg 'Set local date time'
  date_from_web=$(wget -qSO- "${DATETIME_URL}" 2>&1 | sed -n 's/^ *Date: *//p' | head -n 1)

  date_web_comp=$(date -d "$(convert_web_date_compare "${date_from_web}")" +%s)
  date_local_comp=$(date +%s)

  diff=$((date_web_comp - date_local_comp))
  if [ "${diff}" -ne 0 ]; then
    date_to_set=$(convert_web_date "${date_from_web}")
    log_warning_msg "set date to: ${date_to_set}"
    date -s "${date_to_set}" > /dev/null
  else
    log_success_msg "No need to set new date"
  fi
  log_end_msg
fi

log_begin_msg 'Initialize and start wireguard'
if [ -n "${ENABLE_QUICK}" ]; then
  wg-quick up "${ADAPTER}"
else
  ip link add dev "${INTERFACE}" type wireguard
  if [ -e "/etc/wireguard/privatekey.jwe" ]; then
    log_success_msg "Found jwe keyfile"
    clevis decrypt tpm2 < /etc/wireguard/privatekey.jwe > /etc/wireguard/privatekey
    wg set "${INTERFACE}" private-key /etc/wireguard/privatekey
  fi
  wg addconf "${INTERFACE}" "${ADAPTER}"

  # Interface must be up before adding routes.
  if [ -n "${INTERFACE_MTU}" ]; then
    ip link set "mtu ${INTERFACE_MTU}" dev "${INTERFACE}" up
  else
    ip link set "${INTERFACE}" up
  fi

  if [ -n "${INTERFACE_ADDR_IPV4}" ]; then
    for i in ${INTERFACE_ADDR_IPV4}; do
      ip -4 addr add "${i}" dev "${INTERFACE}"
    done
  fi

  if [ -n "${INTERFACE_ADDR_IPV6}" ]; then
    for i in ${INTERFACE_ADDR_IPV6}; do
      ip -6 addr add "${i}" dev "${INTERFACE}"
    done
  fi

  if [ -n "${PEER_ALLOWED_IPS_IPV4}" ]; then
    for i in ${PEER_ALLOWED_IPS_IPV4}; do
      ip -4 route add "${i}" dev "${INTERFACE}"
    done
  fi

  if [ -n "${PEER_ALLOWED_IPS_IPV6}" ]; then
    for i in ${PEER_ALLOWED_IPS_IPV6}; do
      ip -6 route add "${i}" dev "${INTERFACE}"
    done
  fi
fi

log_end_msg
