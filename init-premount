#!/bin/sh

PREREQ="udev"
OPTIONAL_PARAMS=""
ALLOWED_IPS_DUALSTACK=""
MTU=""

prereqs() {
  echo "${PREREQ}"
}

case "${1}" in
  prereqs)
    prereqs
    exit 0
  ;;
esac

. /scripts/functions

if [ ! -e /sbin/wg ]; then
  log_failure_msg 'Wireguard binary not found; skipping start'
  exit 0
fi
if [ ! -e /etc/wireguard/config ]; then
  log_failure_msg 'Wireguard config not found; skipping start'
  exit 0
fi
if [ ! -e /etc/wireguard/private_key ]; then
  log_failure_msg 'Wireguard client private keyfile not found, skipping start'
  exit 0
fi

log_begin_msg 'Loading wireguard config'
. /etc/wireguard/config

if [ -z ${INTERFACE} ]; then
  log_failure_msg 'Interface name is not defined'
  return 1
fi

if [ -z "${INTERFACE_ADDR}" ] && [ -z "${INTERFACE_ADDR_6}" ]; then
  log_failure_msg 'Interface IPv4 or IPv6 address is not defined'
  return 1
fi

if [ -n "${INTERFACE_ADDR}" ] && [ -z "${ALLOWED_IPS}" ]; then
  log_failure_msg 'Allowed IPv4 IPs is not defined, even though IPv4 address is set'
  return 1
fi

if [ -n "${INTERFACE_ADDR_6}" ] && [ -z "${ALLOWED_IPS_6}" ]; then
  log_failure_msg 'Allowed IPv6 IPs is not defined, even though IPv6 address is set'
  return 1
fi

if [ -z ${PEER_PUBLIC_KEY} ]; then
  log_failure_msg 'Peer public key is not defined'
  return 1
fi

if [ -z ${PEER_ENDPOINT} ]; then
  log_failure_msg 'Peer endpoint is not defined'
  return 1
fi
log_end_msg

log_begin_msg 'Starting wireguard'
# Ensure networking is started (idempotent) and setup DNS.
configure_networking
touch /etc/resolv.conf
for adapter in /run/net-*.conf; do
  . "${adapter}"
  if [ ! -z "${IPV4DNS0}" ]; then
    echo nameserver "${IPV4DNS0}" >> /etc/resolv.conf
  fi
  if [ ! -z "${IPV4DNS1}" ]; then;
    echo nameserver "${IPV4DNS1}" >> /etc/resolv.conf
  fi
  if [ ! -z "${IPV6DNS0}" ]; then
    echo nameserver "${IPV6DNS0}" >> /etc/resolv.conf
  fi
  if [ ! -z "${IPV6DNS1}" ]; then
     echo nameserver "${IPV6DNS1}" >> /etc/resolv.conf
  fi
done

# Enumerate all the optional parameters if they exist
if [ ! -z "${PERSISTENT_KEEPALIVES}" ]; then
	OPTIONAL_PARAMS=" persistent-keepalive ${PERSISTENT_KEEPALIVES}"
fi

if [ -n "${PRE_SHARED_KEY}" ] && [ -s "/etc/wireguard/pre_shared_key" ]; then
	OPTIONAL_PARAMS="${OPTIONAL_PARAMS} preshared-key /etc/wireguard/pre_shared_key"
fi

ip link add dev ${INTERFACE} type wireguard

if [ -n "${ALLOWED_IPS}" ]; then
  ALLOWED_IPS_DUALSTACK="allowed-ips ${ALLOWED_IPS}"
fi

if [ -n "${ALLOWED_IPS_6}" ]; then
  ALLOWED_IPS_DUALSTACK="${ALLOWED_IPS_DUALSTACK} allowed-ips ${ALLOWED_IPS_6}"
fi

/sbin/wg set ${INTERFACE} \
    private-key /etc/wireguard/private_key \
    peer ${PEER_PUBLIC_KEY} \
    endpoint ${PEER_ENDPOINT} \
    ${OPTIONAL_PARAMS} \
    ${ALLOWED_IPS_DUALSTACK}

if [ -n "${INTERFACE_ADDR}" ]; then
  ip -4 addr add ${INTERFACE_ADDR} dev ${INTERFACE}
fi

if [ -n "${INTERFACE_ADDR_6}" ]; then
  ip -6 addr add ${INTERFACE_ADDR_6} dev ${INTERFACE}
fi

if [ -n "${WG_MTU}" ]; then
 	MTU="mtu ${WG_MTU}"
fi

ip link set ${INTERFACE} ${MTU} up

if [ -n "${ALLOWED_IPS}" ]; then
  ip -4 route add ${ALLOWED_IPS} dev ${INTERFACE}
fi

if [ -n "${ALLOWED_IPS_6}" ]; then
  ip -6 route add ${ALLOWED_IPS_6} dev ${INTERFACE}
fi

log_end_msg
